version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sportskalendar-db
    environment:
      POSTGRES_DB: sportskalendar
      POSTGRES_USER: sportskalendar
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - sportskalendar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sportskalendar -d sportskalendar"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sportskalendar-backend
    environment:
      NODE_ENV: production
      PORT: 4000
      FORCE_HTTPS: "true"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sportskalendar
      DB_USER: sportskalendar
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      JWT_SECRET: ${JWT_SECRET:-your_very_strong_jwt_secret_here_minimum_32_characters_long}
      FOOTBALL_DATA_KEY: ${FOOTBALL_DATA_KEY}
      API_FOOTBALL_KEY: ${API_FOOTBALL_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
    ports:
      - "4000:4000"
    networks:
      - sportskalendar-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sportskalendar-frontend
    environment:
      VITE_API_URL: https://api.dlouis.ddnss.de/api
    ports:
      - "80:80"
      - "443:443"
    networks:
      - sportskalendar-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7-alpine
    container_name: sportskalendar-redis
    ports:
      - "6379:6379"
    networks:
      - sportskalendar-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Nginx Load Balancer (optional for scaling)
  nginx:
    image: nginx:alpine
    container_name: sportskalendar-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - sportskalendar-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  sportskalendar-network:
    driver: bridge

