networks:
  proxy:
    name: traefik-proxy
    driver: bridge
  internal:
    driver: bridge

volumes:
  postgres_data:
  traefik_letsencrypt:

services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: sportskalendar-db
    environment:
      POSTGRES_DB: sportskalendar
      POSTGRES_USER: sportskalendar
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sportskalendar -d sportskalendar"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/davidklouis-sketch/sportskalendar/backend:latest}
    container_name: sportskalendar-backend
    environment:
      NODE_ENV: production
      PORT: 4000
      FORCE_HTTPS: "true"
      DATABASE_URL: postgresql://sportskalendar:${DB_PASSWORD}@postgres:5432/sportskalendar
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sportskalendar
      DB_USER: sportskalendar
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      FOOTBALL_DATA_KEY: ${FOOTBALL_DATA_KEY}
      API_FOOTBALL_KEY: ${API_FOOTBALL_KEY}
      NEWS_API_KEY: ${NEWS_API_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal
      - proxy
    volumes:
      - ./backend/data:/app/data
    labels:
      # Enable routing via Traefik
      traefik.enable: "true"
      traefik.docker.network: traefik-proxy
      # Backend API on api.<domain>, keep /api prefix (backend already serves under /api)
      traefik.http.routers.backend.rule: Host(`${BACKEND_HOST}`) && PathPrefix(`/api`)
      traefik.http.routers.backend.entrypoints: websecure
      traefik.http.routers.backend.tls: "true"
      traefik.http.routers.backend.tls.certresolver: le
      traefik.http.services.backend.loadbalancer.server.port: "4000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/davidklouis-sketch/sportskalendar/frontend:latest}
    container_name: sportskalendar-frontend
    depends_on:
      - backend
    networks:
      - proxy
    labels:
      traefik.enable: "true"
      traefik.docker.network: traefik-proxy
      # Frontend on <domain>
      traefik.http.routers.frontend.rule: Host(`${FRONTEND_HOST}`)
      traefik.http.routers.frontend.entrypoints: websecure
      traefik.http.routers.frontend.tls: "true"
      traefik.http.routers.frontend.tls.certresolver: le
      traefik.http.services.frontend.loadbalancer.server.port: "80"
      # Security headers
      traefik.http.middlewares.frontend-security.headers.frameDeny: "true"
      traefik.http.middlewares.frontend-security.headers.contentTypeNosniff: "true"
      traefik.http.middlewares.frontend-security.headers.browserXssFilter: "true"
      traefik.http.routers.frontend.middlewares: frontend-security
    restart: unless-stopped


