name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: TypeScript compile check
        run: npm run build
      
      - name: Run linter (if available)
        run: npm run lint --if-present
        continue-on-error: true

  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: TypeScript compile check
        run: npm run build
      
      - name: Run linter
        run: npm run lint
        continue-on-error: true

  # Build and Push Docker Images
  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
      
      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            VITE_API_URL=https://${{ secrets.BACKEND_HOST }}/api

  # Deploy to Production
  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            # Set deployment path
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH || '/home/dl/sportskalendar/sportskalendar' }}"
            
            # Create directory if it doesn't exist
            mkdir -p "$DEPLOY_PATH"
            cd "$DEPLOY_PATH"
            
            # Clone repository if not exists, otherwise pull
            if [ ! -d ".git" ]; then
              echo "Cloning repository..."
              git clone https://github.com/davidklouis-sketch/sportskalendar.git .
            else
              echo "Pulling latest changes..."
              git pull origin main
            fi
            
            # Create .env if it doesn't exist
            if [ ! -f .env.production ]; then
              echo "Creating .env.production from secrets..."
              cat > .env.production << EOF
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            FOOTBALL_DATA_KEY=${{ secrets.FOOTBALL_DATA_KEY }}
            API_FOOTBALL_KEY=${{ secrets.API_FOOTBALL_KEY }}
            NEWS_API_KEY=${{ secrets.NEWS_API_KEY }}
            BACKEND_HOST=${{ secrets.BACKEND_HOST }}
            FRONTEND_HOST=${{ secrets.FRONTEND_HOST }}
            LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
            BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
            FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            EOF
            fi
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Pull latest images
            docker compose -f docker-compose.traefik.yml --env-file .env.production pull
            
            # Deploy with zero-downtime (preserving volumes)
            docker compose -f docker-compose.traefik.yml --env-file .env.production up -d --remove-orphans
            
            # Verify database volume exists and is persistent
            echo "Checking database volume persistence..."
            docker volume ls | grep postgres_data || echo "⚠️ postgres_data volume not found"
            
            # Cleanup old images
            docker image prune -f
            
            echo "✅ Deployment completed successfully!"
