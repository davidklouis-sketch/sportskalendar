name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_FRONTEND: ghcr.io/${{ github.repository }}/frontend
  IMAGE_BACKEND: ghcr.io/${{ github.repository }}/backend

jobs:
  build-and-push:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [ frontend, backend ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare tags
        id: prep
        run: |
          IMAGE_VAR=IMAGE_$(echo "${{ matrix.service }}" | tr '[:lower:]' '[:upper:]')
          IMAGE_NAME=${!IMAGE_VAR}
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
          SHA_TAG=$IMAGE_NAME:sha-${GITHUB_SHA::7}
          if [ "${{ github.ref_name }}" = "main" ]; then
            LATEST_TAG=$IMAGE_NAME:latest
          else
            SAFE_BRANCH=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr -c 'a-z0-9._-' '-')
            LATEST_TAG=$IMAGE_NAME:${SAFE_BRANCH}
          fi
          echo "SHA_TAG=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ steps.prep.outputs.SHA_TAG }}
            ${{ steps.prep.outputs.LATEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to server
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Copy compose files (Traefik stack)
        run: |
          rsync -avz -e ssh docker-compose.traefik.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/sportskalendar/docker-compose.yml

      - name: Deploy stack (Traefik + Postgres + Backend + Frontend)
        env:
          REGISTRY: ghcr.io
          FRONTEND_IMAGE: ghcr.io/${{ github.repository }}/frontend:latest
          BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend:latest
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
            set -euo pipefail; \
            mkdir -p ~/sportskalendar && cd ~/sportskalendar; \
            echo 'Logging in to GHCR'; \
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin; \
            docker pull $BACKEND_IMAGE || true; \
            docker pull $FRONTEND_IMAGE || true; \
            export DB_PASSWORD='${{ secrets.DB_PASSWORD }}'; \
            export JWT_SECRET='${{ secrets.JWT_SECRET }}'; \
            export FOOTBALL_DATA_KEY='${{ secrets.FOOTBALL_DATA_KEY }}'; \
            export API_FOOTBALL_KEY='${{ secrets.API_FOOTBALL_KEY }}'; \
            export NEWS_API_KEY='${{ secrets.NEWS_API_KEY }}'; \
            export FRONTEND_IMAGE='$FRONTEND_IMAGE'; \
            export BACKEND_IMAGE='$BACKEND_IMAGE'; \
            export FRONTEND_HOST='${{ secrets.FRONTEND_HOST }}'; \
            export BACKEND_HOST='${{ secrets.BACKEND_HOST }}'; \
            docker compose -f docker-compose.yml pull || true; \
            docker compose -f docker-compose.yml up -d --remove-orphans; \
            docker system prune -f; \
          "


