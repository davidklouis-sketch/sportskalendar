name: CI/CD Pipeline v2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: Install frontend dependencies
      run: cd frontend && npm ci
    
    - name: Install backend dependencies
      run: cd backend && npm ci
    
    - name: Test frontend
      run: cd frontend && npm run build
    
    - name: Test backend
      run: cd backend && npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        build-args: |
          VITE_API_URL=https://api.sportskalendar.de/api
          VITE_ADMOB_CLIENT_ID=${{ secrets.VITE_ADMOB_CLIENT_ID }}
          VITE_ADMOB_BANNER_SLOT=${{ secrets.VITE_ADMOB_BANNER_SLOT }}
          VITE_ADMOB_SQUARE_SLOT=${{ secrets.VITE_ADMOB_SQUARE_SLOT }}
          VITE_ADMOB_LEADERBOARD_SLOT=${{ secrets.VITE_ADMOB_LEADERBOARD_SLOT }}
          VITE_ADMOB_INTERSTITIAL_SLOT=${{ secrets.VITE_ADMOB_INTERSTITIAL_SLOT }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        build-args: |
          NODE_ENV=production

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT || '22' }}
        script: |
          set -e
          echo "🚀 Starting deployment..."
          
          # Navigate to project directory
          cd /home/dl/sportskalendar/sportskalendar
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Set environment variables for correct image tags
          export BACKEND_IMAGE="ghcr.io/davidklouis-sketch/sportskalendar/backend:${{ github.sha }}"
          export FRONTEND_IMAGE="ghcr.io/davidklouis-sketch/sportskalendar/frontend:${{ github.sha }}"
          
          # Pull latest images
          docker compose -f docker-compose.traefik.yml --env-file .env.production pull
          
          # Stop and remove old containers, networks, and orphans (but keep volumes for database persistence!)
          docker compose -f docker-compose.traefik.yml --env-file .env.production down --remove-orphans || true
          
          # Additional cleanup to ensure no stale containers/networks
          docker system prune -f || true
          
          # Set all required environment variables
          export STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}"
          export STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}"
          export STRIPE_PRICE_ID="${{ secrets.STRIPE_PRICE_ID }}"
          export FRONTEND_URL="https://sportskalendar.de"
          
          # Email configuration
          export SMTP_HOST="${{ secrets.SMTP_HOST }}"
          export SMTP_PORT="${{ secrets.SMTP_PORT }}"
          export SMTP_USER="${{ secrets.SMTP_USER }}"
          export SMTP_PASS="${{ secrets.SMTP_PASS }}"
          export SMTP_USE_SSL="${{ secrets.SMTP_USE_SSL }}"
          
          # Debug email configuration
          echo "🔍 Email configuration:"
          echo "SMTP_HOST: ${SMTP_HOST}"
          echo "SMTP_PORT: ${SMTP_PORT}"
          echo "SMTP_USER: ${SMTP_USER}"
          echo "SMTP_PASS: ${SMTP_PASS:0:4}****"
          echo "SMTP_USE_SSL: ${SMTP_USE_SSL}"
          
          # Set domain configuration for Traefik SSL certificates
          export BACKEND_HOST="api.sportskalendar.de"
          export FRONTEND_HOST="sportskalendar.de"
          
          # Debug: Show environment variables (without sensitive data)
          echo "🔍 Environment variables set:"
          echo "STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:0:10}..."
          echo "STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:0:10}..."
          echo "STRIPE_PRICE_ID: ${STRIPE_PRICE_ID}"
          echo "BACKEND_HOST: ${BACKEND_HOST}"
          echo "FRONTEND_HOST: ${FRONTEND_HOST}"
          echo "FRONTEND_URL: ${FRONTEND_URL}"
          echo "🔍 Checking if secrets are properly set:"
          if [ -z "$STRIPE_SECRET_KEY" ]; then echo "❌ STRIPE_SECRET_KEY is empty!"; else echo "✅ STRIPE_SECRET_KEY is set"; fi
          if [ -z "$STRIPE_WEBHOOK_SECRET" ]; then echo "❌ STRIPE_WEBHOOK_SECRET is empty!"; else echo "✅ STRIPE_WEBHOOK_SECRET is set"; fi
          if [ -z "$STRIPE_PRICE_ID" ]; then echo "❌ STRIPE_PRICE_ID is empty!"; else echo "✅ STRIPE_PRICE_ID is set"; fi
          
          # Direct environment variable injection
          echo "🔍 Starting services with direct environment variable injection..."
          
          # Export variables in current shell for docker compose
          export STRIPE_SECRET_KEY="${STRIPE_SECRET_KEY}"
          export STRIPE_WEBHOOK_SECRET="${STRIPE_WEBHOOK_SECRET}"
          export STRIPE_PRICE_ID="${STRIPE_PRICE_ID}"
          export FRONTEND_URL="${FRONTEND_URL}"
          export SMTP_HOST="${SMTP_HOST}"
          export SMTP_PORT="${SMTP_PORT}"
          export SMTP_USER="${SMTP_USER}"
          export SMTP_PASS="${SMTP_PASS}"
          export SMTP_USE_SSL="${SMTP_USE_SSL}"
          
          # Verify exports
          echo "🔍 Exported variables in shell:"
          env | grep STRIPE | sed 's/=.*/=***/'
          env | grep SMTP | sed 's/=.*/=***/'
          
          # Create a docker-compose override file that explicitly sets the environment variables
          printf 'services:\n  backend:\n    environment:\n      - STRIPE_SECRET_KEY=%s\n      - STRIPE_WEBHOOK_SECRET=%s\n      - STRIPE_PRICE_ID=%s\n      - FRONTEND_URL=%s\n      - SMTP_HOST=%s\n      - SMTP_PORT=%s\n      - SMTP_USER=%s\n      - SMTP_PASS=%s\n      - SMTP_USE_SSL=%s\n' \
            "${STRIPE_SECRET_KEY}" "${STRIPE_WEBHOOK_SECRET}" "${STRIPE_PRICE_ID}" "${FRONTEND_URL}" \
            "${SMTP_HOST}" "${SMTP_PORT}" "${SMTP_USER}" "${SMTP_PASS}" "${SMTP_USE_SSL}" \
            > docker-compose.override.yml
          
          echo "🔍 Created docker-compose.override.yml"
          cat docker-compose.override.yml | sed 's/STRIPE_[^=]*=.*/STRIPE_***=***/' | sed 's/FRONTEND_URL=.*/FRONTEND_URL=***/' | sed 's/SMTP_[^=]*=.*/SMTP_***=***/'
          
          # Start services with base config, .env.production, AND override
          docker compose -f docker-compose.traefik.yml -f docker-compose.override.yml --env-file .env.production up -d --force-recreate
          
          # Wait for backend to be ready
          echo "⏳ Waiting for backend to be ready..."
          sleep 30
          
          # Run email verification migration for existing users
          echo "📧 Running email verification migration..."
          echo "🔍 Checking if backend container is running..."
          docker ps | grep sportskalendar-backend || echo "❌ Backend container not found"
          
          echo "🔍 Checking database connection in backend container..."
          docker exec sportskalendar-backend node -e "
            require('dotenv').config();
            console.log('DATABASE_URL configured:', !!process.env.DATABASE_URL);
            console.log('DATABASE_URL length:', process.env.DATABASE_URL ? process.env.DATABASE_URL.length : 0);
          " || echo "❌ Database connection check failed"
          
          echo "🔍 Running migration script with detailed output..."
          docker exec sportskalendar-backend npm run migrate-email-verification 2>&1 || echo "⚠️ Migration failed"
          
          # Verify the backend container has the environment variables
          echo "🔍 Checking backend container environment:"
          docker exec sportskalendar-backend printenv | grep STRIPE || echo "❌ No STRIPE variables found in container!"
          
          # Clean up old images
          docker image prune -f
          
          echo "✅ Deployment completed successfully!"
