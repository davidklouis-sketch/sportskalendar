name: CI/CD Pipeline v2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: Install frontend dependencies
      run: cd frontend && npm ci
    
    - name: Install backend dependencies
      run: cd backend && npm ci
    
    - name: Test frontend
      run: cd frontend && npm run build
    
    - name: Test backend
      run: cd backend && npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        build-args: |
          VITE_API_URL=https://api.sportskalendar.de/api
          VITE_ADMOB_CLIENT_ID=${{ secrets.VITE_ADMOB_CLIENT_ID }}
          VITE_ADMOB_BANNER_SLOT=${{ secrets.VITE_ADMOB_BANNER_SLOT }}
          VITE_ADMOB_SQUARE_SLOT=${{ secrets.VITE_ADMOB_SQUARE_SLOT }}
          VITE_ADMOB_LEADERBOARD_SLOT=${{ secrets.VITE_ADMOB_LEADERBOARD_SLOT }}
          VITE_ADMOB_INTERSTITIAL_SLOT=${{ secrets.VITE_ADMOB_INTERSTITIAL_SLOT }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        build-args: |
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_PRICE_ID=${{ secrets.STRIPE_PRICE_ID }}
          FRONTEND_URL=https://sportskalendar.de

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT || '22' }}
        script: |
          set -e
          echo "üöÄ Starting deployment..."
          
          # Navigate to project directory
          cd /home/dl/sportskalendar/sportskalendar
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Set environment variables for correct image tags
          export BACKEND_IMAGE="ghcr.io/davidklouis-sketch/sportskalendar/backend:${{ github.sha }}"
          export FRONTEND_IMAGE="ghcr.io/davidklouis-sketch/sportskalendar/frontend:${{ github.sha }}"
          
          # Pull latest images
          docker compose -f docker-compose.traefik.yml --env-file .env.production pull
          
          # Force stop and remove old containers
          docker compose -f docker-compose.traefik.yml --env-file .env.production down --volumes --remove-orphans
          
          # Set all required environment variables
          export STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}"
          export STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}"
          export STRIPE_PRICE_ID="${{ secrets.STRIPE_PRICE_ID }}"
          export FRONTEND_URL="https://sportskalendar.de"
          
          # Debug: Show environment variables (without sensitive data)
          echo "üîç Environment variables set:"
          echo "STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:0:10}..."
          echo "STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:0:10}..."
          echo "STRIPE_PRICE_ID: ${STRIPE_PRICE_ID}"
          echo "FRONTEND_URL: ${FRONTEND_URL}"
          
          # Direct environment variable injection
          echo "üîç Starting services with direct environment variable injection..."
          
          # Start services with environment variables directly injected
          STRIPE_SECRET_KEY="${STRIPE_SECRET_KEY}" \
          STRIPE_WEBHOOK_SECRET="${STRIPE_WEBHOOK_SECRET}" \
          STRIPE_PRICE_ID="${STRIPE_PRICE_ID}" \
          FRONTEND_URL="${FRONTEND_URL}" \
          docker compose -f docker-compose.traefik.yml --env-file .env.production up -d --force-recreate
          
          # Clean up old images
          docker image prune -f
          
          echo "‚úÖ Deployment completed successfully!"
